<div class=" @ClassName  shadow tab">

    @foreach (var btn in Buttons)
    {
        <button class="@btn.ClassName @ButtonClassName" @onclick=@(()=>OnClick(btn))>@btn.Item.Text</button>
    }
</div>
@typeparam TExample
@code {
    [Parameter]
    public string ClassName { get; set; } = "blue";
    [Parameter]
    public string ButtonClassName { get; set; } = "text-white";

    private List<MobileGroupButtonsItem<TExample>> data;
    [Parameter]
    public List<MobileGroupButtonsItem<TExample>> Data
    {
        get { return data; }
        set
        {
            data = value ?? new List<MobileGroupButtonsItem<TExample>>();
            Buttons = data.Select((o, index) => new MobileGroupButton<TExample>() { Item = o, ClassName = GetClassName(index), Index = index }).ToList();
           
        }
    }
    public int Index { get; set; }

    public List<MobileGroupButton<TExample>> Buttons { set; get; } = new List<MobileGroupButton<TExample>>();

    [Parameter]
    public EventCallback<TExample> OnChanged { get; set; }

    public string GetClassName(int index)
    {
        return Index == index ? "active" : "";
    }
    public void OnClick(MobileGroupButton<TExample> button)
    {
        var olwIndex = Index;
        Index = button.Index;

        Buttons[olwIndex].ClassName = GetClassName(olwIndex);
        Buttons[button.Index].ClassName = GetClassName(button.Index);
        if (OnChanged.HasDelegate)
            OnChanged.InvokeAsync(button.Item.Value);
    }


}
